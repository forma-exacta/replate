{"version":3,"sources":["../src/makeActionTypes.test.js"],"names":["describe","it","expect","toEqual","partials","domainName","reduce","result","partial","value","toUpperCase","theActionName","action","theActionName123","maybeAtrickyOne","maybeATrickyOne","theActionUPPERName","CAPSName"],"mappings":"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","file":"makeActionTypes.test.js","sourcesContent":["import makeActionTypes, {crudPartials, makeCRUDActionTypes, makeActionType, makeActionTypeFromActionName, makeActionTypesFromActions} from './makeActionTypes'\nimport {setOption} from './globalOptions'\n\ndescribe('makeActionTypes', () => {\n\n  it('- makeActionType concatenates partial and domain name', () => {\n    expect(makeActionType('DOMAIN', 'PARTIAL')).toEqual('DOMAIN:PARTIAL')\n  })\n\n  it('- makeActionType converts domain and partial to upperCase', () => {\n    expect(makeActionType('domain', 'partial')).toEqual('DOMAIN:PARTIAL')\n  })\n\n  it(':: makeActionType uses namespace', () => {\n    setOption('namespace', 'com.forma')\n    expect(makeActionType('domain', 'partial')).toEqual('com.forma.DOMAIN:PARTIAL')\n    setOption('namespace')\n  })\n\n  it('generates all actionTypes for domain name', () => {\n    const partials = ['P1', 'P2']\n    const domainName = 'TEST1'\n\n    expect(makeActionTypes(domainName, partials)).toEqual(partials.reduce((result, partial) => {\n      result[partial] = makeActionType(domainName, partial)\n      return result\n    }, {}))\n  })\n\n  it('converts domainName to upperCase', () => {\n    const partials = ['P1', 'P2']\n    const domainName = 'test_upper'\n\n    // touppercase\n    expect(makeActionTypes(domainName, partials)).toEqual(partials.reduce((result, partial) => {\n      const value = `${domainName.toUpperCase()}:${partial}`\n      result[partial] = value\n      return result\n    }, {}))\n  })\n\n  it('converts partials to upperCase', () => {\n    const partials = ['p1', 'p2']\n    const domainName = 'TEST_PARTIAL_UPPER'\n\n    // touppercase\n    expect(makeActionTypes(domainName, partials)).toEqual(partials.reduce((result, partial) => {\n      const value = `${domainName}:${partial.toUpperCase()}`\n      result[partial.toUpperCase()] = value\n      return result\n    }, {}))\n  })\n\n  it('makeActionTypeFromActionName underscores and uppercases', () => {\n    expect(makeActionTypeFromActionName('domain', 'theActionName')).toEqual('DOMAIN:THE_ACTION_NAME')\n    expect(makeActionTypeFromActionName('domain', 'action')).toEqual('DOMAIN:ACTION')\n    expect(makeActionTypeFromActionName('domain', 'theActionName123')).toEqual('DOMAIN:THE_ACTION_NAME_123')\n    expect(makeActionTypeFromActionName('domain', 'maybeAtrickyOne')).toEqual('DOMAIN:MAYBE_ATRICKY_ONE')\n    expect(makeActionTypeFromActionName('domain', 'maybeATrickyOne')).toEqual('DOMAIN:MAYBE_A_TRICKY_ONE')\n    expect(makeActionTypeFromActionName('domainName', 'theActionUPPERName')).toEqual('DOMAIN_NAME:THE_ACTION_UPPER_NAME')\n    expect(makeActionTypeFromActionName('domain', 'CAPSName')).toEqual('DOMAIN:CAPS_NAME')\n  })\n\n  it('makeActionTypesFromActions converts all action names', () => {\n    expect(makeActionTypesFromActions('domain', {\n      theActionName: () => {},\n      action: () => {},\n      theActionName123: () => {},\n      maybeAtrickyOne: () => {},\n      maybeATrickyOne: () => {},\n      theActionUPPERName: () => {},\n      CAPSName: () => {},\n    })).toEqual({\n      theActionName: 'DOMAIN:THE_ACTION_NAME',\n      action: 'DOMAIN:ACTION',\n      theActionName123: 'DOMAIN:THE_ACTION_NAME_123',\n      maybeAtrickyOne: 'DOMAIN:MAYBE_ATRICKY_ONE',\n      maybeATrickyOne: 'DOMAIN:MAYBE_A_TRICKY_ONE',\n      theActionUPPERName: 'DOMAIN:THE_ACTION_UPPER_NAME',\n      CAPSName: 'DOMAIN:CAPS_NAME'\n    })\n  })\n\n})\n"]}