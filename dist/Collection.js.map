{"version":3,"sources":["../src/Collection.js"],"names":["Collection","name","initialState","subState","byId","upsert","state","action","payload","_id","remove","newState","allIds","includes","slice","push","splice","indexOf"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqBA,U;;;AAEnB,sBAAYC,IAAZ,EAAkBC,YAAlB,EAAgCC,QAAhC,EAA0C;AAAA;;AAAA,mHAClCF,IADkC,EAC5BC,YAD4B;AAEtCE,YAAM,oBAAU,MAAV,EAAkB,EAAlB,EAAsB;AAC1BC,gBAAQ,gBAACC,KAAD,EAAQC,MAAR,EAAmB;AACzBA,iBAAOC,OAAP,CAAeC,GAAf,GAAqBF,OAAOC,OAAP,CAAeC,GAAf,IAAsB,kBAA3C;;AAEA,8BACKH,KADL,sBAEGC,OAAOC,OAAP,CAAeC,GAFlB,EAEwBF,OAAOC,OAF/B;AAID,SARyB;AAS1BE,gBAAQ,gBAACJ,KAAD,EAAQC,MAAR,EAAmB;AACzB,cAAII,wBAAeL,KAAf,CAAJ;AACA,iBAAOK,SAASJ,OAAOC,OAAP,CAAeC,GAAxB,CAAP;AACA,iBAAOE,QAAP;AACD;AAbyB,OAAtB,CAFgC;AAiBtCC,cAAQ,oBAAU,QAAV,EAAoB,EAApB,EAAwB;AAC9BP,gBAAQ,gBAACC,KAAD,EAAQC,MAAR,EAAmB;AACzB,cAAGD,MAAMO,QAAN,CAAeN,OAAOC,OAAP,CAAeC,GAA9B,CAAH,EACE,OAAOH,KAAP;;AAEF,cAAIK,WAAWL,MAAMQ,KAAN,EAAf;AACAH,mBAASI,IAAT,CAAcR,OAAOC,OAAP,CAAeC,GAA7B;AACA,iBAAOE,QAAP;AACD,SAR6B;AAS9BD,gBAAQ,gBAACJ,KAAD,EAAQC,MAAR,EAAmB;AACzB,cAAII,WAAWL,MAAMQ,KAAN,EAAf;AACAH,mBAASK,MAAT,CAAgBL,SAASM,OAAT,CAAiBV,OAAOC,OAAP,CAAeC,GAAhC,CAAhB,EAAsD,CAAtD;AACA,iBAAOE,QAAP;AACD;AAb6B,OAAxB;AAjB8B,OAgCnCR,QAhCmC;AAkCzC;;;;;kBApCkBH,U","file":"Collection.js","sourcesContent":["import State from './State'\r\nimport uuidv4 from 'uuid/v4'\r\n\r\nexport default class Collection extends State {\r\n\r\n  constructor(name, initialState, subState) {\r\n    super(name, initialState, {\r\n      byId: new State('byId', {}, {\r\n        upsert: (state, action) => {\r\n          action.payload._id = action.payload._id || uuidv4()\r\n\r\n          return {\r\n            ...state,\r\n            [action.payload._id]: action.payload\r\n          }\r\n        },\r\n        remove: (state, action) => {\r\n          let newState = {...state}\r\n          delete newState[action.payload._id]\r\n          return newState\r\n        }\r\n      }),\r\n      allIds: new State('allIds', [], {\r\n        upsert: (state, action) => {\r\n          if(state.includes(action.payload._id))\r\n            return state\r\n\r\n          let newState = state.slice()\r\n          newState.push(action.payload._id)\r\n          return newState\r\n        },\r\n        remove: (state, action) => {\r\n          let newState = state.slice();\r\n          newState.splice(newState.indexOf(action.payload._id), 1)\r\n          return newState\r\n        }\r\n      }),\r\n      ...subState\r\n    })\r\n  }\r\n\r\n}\r\n"]}