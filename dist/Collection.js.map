{"version":3,"sources":["../src/Collection.js"],"names":["Collection","name","byId","allIds","upsert","state","action","payload","_id","remove","newState","includes","slice","push","splice","indexOf"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqBA,U;;;AAEnB,sBAAYC,IAAZ,EAAkB;AAAA;;AAAA,mHACVA,IADU,EACJ,EAACC,MAAM,EAAP,EAAWC,QAAQ,EAAnB,EADI,EACoB;AAClCD,YAAM;AACJE,gBAAQ,gBAACC,KAAD,EAAQC,MAAR,EAAmB;AACzBA,iBAAOC,OAAP,CAAeC,GAAf,GAAqBF,OAAOC,OAAP,CAAeC,GAAf,IAAsB,kBAA3C;;AAEA,8BACKH,KADL,sBAEGC,OAAOC,OAAP,CAAeC,GAFlB,EAEwBF,OAAOC,OAF/B;AAID,SARG;AASJE,gBAAQ,gBAACJ,KAAD,EAAQC,MAAR,EAAmB;AACzB,cAAII,wBAAeL,KAAf,CAAJ;AACA,iBAAOK,SAASJ,OAAOC,OAAP,CAAeC,GAAxB,CAAP;AACA,iBAAOE,QAAP;AACD;AAbG,OAD4B;AAgBlCP,cAAQ;AACNC,gBAAQ,gBAACC,KAAD,EAAQC,MAAR,EAAmB;AACzB,cAAGD,MAAMM,QAAN,CAAeL,OAAOC,OAAP,CAAeC,GAA9B,CAAH,EACE,OAAOH,KAAP;;AAEF,cAAIK,WAAWL,MAAMO,KAAN,EAAf;AACAF,mBAASG,IAAT,CAAcP,OAAOC,OAAP,CAAeC,GAA7B;AACA,iBAAOE,QAAP;AACD,SARK;AASND,gBAAQ,gBAACJ,KAAD,EAAQC,MAAR,EAAmB;AACzB,cAAII,WAAWL,MAAMO,KAAN,EAAf;AACAF,mBAASI,MAAT,CAAgBJ,SAASK,OAAT,CAAiBT,OAAOC,OAAP,CAAeC,GAAhC,CAAhB,EAAsD,CAAtD;AACA,iBAAOE,QAAP;AACD;AAbK;AAhB0B,KADpB;AAiCjB;;;;;kBAnCkBV,U","file":"Collection.js","sourcesContent":["import ComplexState from './ComplexState'\r\nimport uuidv4 from 'uuid/v4'\r\n\r\nexport default class Collection extends ComplexState {\r\n\r\n  constructor(name) {\r\n    super(name, {byId: {}, allIds: []}, {\r\n      byId: {\r\n        upsert: (state, action) => {\r\n          action.payload._id = action.payload._id || uuidv4()\r\n\r\n          return {\r\n            ...state,\r\n            [action.payload._id]: action.payload\r\n          }\r\n        },\r\n        remove: (state, action) => {\r\n          let newState = {...state}\r\n          delete newState[action.payload._id]\r\n          return newState\r\n        }\r\n      },\r\n      allIds: {\r\n        upsert: (state, action) => {\r\n          if(state.includes(action.payload._id))\r\n            return state\r\n\r\n          let newState = state.slice()\r\n          newState.push(action.payload._id)\r\n          return newState\r\n        },\r\n        remove: (state, action) => {\r\n          let newState = state.slice();\r\n          newState.splice(newState.indexOf(action.payload._id), 1)\r\n          return newState\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n"]}