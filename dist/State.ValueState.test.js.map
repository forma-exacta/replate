{"version":3,"sources":["../src/State.ValueState.test.js"],"names":["describe","it","state","set","action","payload","inc","expect","actionTypes","toEqual","actions","any","Function","reducer","undefined","type"],"mappings":";;AAAA;;;;AACA;;;;AAEAA,SAAS,OAAT,EAAkB,YAAM;;AAEtBC,KAAG,uCAAH,EAA4C,YAAM;AAChD,QAAMC,QAAQ,oBAAU,OAAV,EAAmB,IAAnB,EAAyB;AACrCC,WAAK;AAAA,eAAMC,OAAOC,OAAb;AAAA,OADgC;AAErCC,WAAK;AAAA,eAAMJ,QAAQE,OAAOC,OAArB;AAAA;AAFgC,KAAzB,CAAd;;AAKAE,WAAOL,MAAMM,WAAb,EAA0BC,OAA1B,CAAkC;AAChCN,WAAK,mDAA6B,OAA7B,EAAsC,KAAtC,CAD2B;AAEhCG,WAAK,mDAA6B,OAA7B,EAAsC,KAAtC;AAF2B,KAAlC;AAIAC,WAAOL,MAAMQ,OAAb,EAAsBD,OAAtB,CAA8B;AAC5BN,WAAKI,OAAOI,GAAP,CAAWC,QAAX,CADuB;AAE5BN,WAAKC,OAAOI,GAAP,CAAWC,QAAX;AAFuB,KAA9B;AAIAL,WAAOL,MAAMW,OAAb,EAAsBJ,OAAtB,CAA8BF,OAAOI,GAAP,CAAWC,QAAX,CAA9B;AACD,GAfD;;AAiBAX,KAAG,oBAAH,EAAyB,YAAM;AAC7B,QAAMC,QAAQ,oBAAU,OAAV,EAAmB,cAAnB,CAAd;;AAEAK,WAAOL,MAAMW,OAAN,CAAcC,SAAd,EAAyB,EAAzB,CAAP,EAAqCL,OAArC,CAA6C,cAA7C;AACD,GAJD;;AAMAR,KAAG,sCAAH,EAA2C,YAAM;AAC/C,QAAMC,QAAQ,oBAAU,OAAV,EAAmB,IAAnB,EAAyB;AACrCC,WAAK,aAACD,KAAD,EAAQE,MAAR;AAAA,eAAmBA,OAAOC,OAA1B;AAAA,OADgC;AAErCC,WAAK,aAACJ,KAAD,EAAQE,MAAR;AAAA,eAAmBF,QAAQE,OAAOC,OAAlC;AAAA;AAFgC,KAAzB,CAAd;;AAKAE,WAAOL,MAAMW,OAAN,CAAc,IAAd,EAAoB,EAACE,MAAMb,MAAMM,WAAN,CAAkBL,GAAzB,EAA8BE,SAAS,CAAvC,EAApB,CAAP,EAAuEI,OAAvE,CAA+E,CAA/E;AACAF,WAAOL,MAAMW,OAAN,CAAc,CAAd,EAAiB,EAACE,MAAMb,MAAMM,WAAN,CAAkBF,GAAzB,EAA8BD,SAAS,CAAvC,EAAjB,CAAP,EAAoEI,OAApE,CAA4E,CAA5E;AACD,GARD;AAUD,CAnCD","file":"State.ValueState.test.js","sourcesContent":["import State from './State'\nimport {makeActionTypeFromActionName} from './makeActionTypes'\n\ndescribe('State', () => {\n\n  it('generates types, actions, and reducer', () => {\n    const state = new State('State', null, {\n      set: () => action.payload,\n      inc: () => state + action.payload\n    })\n\n    expect(state.actionTypes).toEqual({\n      set: makeActionTypeFromActionName('State', 'set'),\n      inc: makeActionTypeFromActionName('State', 'inc'),\n    })\n    expect(state.actions).toEqual({\n      set: expect.any(Function),\n      inc: expect.any(Function)\n    })\n    expect(state.reducer).toEqual(expect.any(Function))\n  })\n\n  it('sets default state', () => {\n    const state = new State('State', 'defaultState')\n\n    expect(state.reducer(undefined, {})).toEqual('defaultState')\n  })\n\n  it('reducer responds to all action types', () => {\n    const state = new State('State', null, {\n      set: (state, action) => action.payload,\n      inc: (state, action) => state + action.payload\n    })\n\n    expect(state.reducer(null, {type: state.actionTypes.set, payload: 1})).toEqual(1)\n    expect(state.reducer(1, {type: state.actionTypes.inc, payload: 2})).toEqual(3)\n  })\n\n})\n"]}