{"version":3,"sources":["../src/Collection.test.js"],"names":["describe","it","state","expect","actionTypes","toEqual","upsert","remove","actions","any","Function","reducer","undefined","byId","allIds","action","name","newState","length","toBe","id","_id","initialState","add","not","toBeDefined","another","testAction","id1","id2"],"mappings":"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","file":"Collection.test.js","sourcesContent":["import Collection from './Collection'\nimport {makeActionTypeFromActionName} from './makeActionTypes'\nimport {combineReducers} from 'redux'  // I probably shouldn't do this, but f it\nimport State from './State'\n\ndescribe('Collection', () => {\n\n  it('generates types, actions, and reducer', () => {\n    const state = new Collection('CollectionTest')\n\n    expect(state.actionTypes).toEqual({\n      upsert: makeActionTypeFromActionName('CollectionTest', 'upsert'),\n      remove: makeActionTypeFromActionName('CollectionTest', 'remove'),\n    })\n    expect(state.actions).toEqual({\n      upsert: expect.any(Function),\n      remove: expect.any(Function)\n    })\n    expect(combineReducers(state.reducer)).toEqual(expect.any(Function))\n  })\n\n  it('sets default state', () => {\n    const state = new Collection('CollectionTest')\n\n    expect(combineReducers(state.reducer)(undefined, {})).toEqual({byId: {}, allIds: []})\n  })\n\n  it('::upsert inserts a new element with an id', () => {\n\n    const state = new Collection('CollectionTest')\n    const action = state.actions.upsert({name: 'test'})\n    const newState = combineReducers(state.reducer)(undefined, action)\n\n    expect(newState.allIds.length).toBe(1)\n    const id = newState.allIds[0]\n    expect(newState.byId[id]).toEqual({_id: id, name: 'test'})\n\n  })\n\n  it('::upsert updates an existing element', () => {\n\n    const state = new Collection('CollectionTest')\n    const initialState = {\n      byId: {1:{_id:1, upsert: 'test'}},\n      allIds: [1]\n    }\n    const action = state.actions.upsert({_id: 1, add: 'new property'})\n    const newState = combineReducers(state.reducer)(initialState, action)\n\n    expect(newState.allIds.length).toBe(1)\n    expect(newState.byId[1]).toEqual({_id: 1, add: 'new property'})\n\n  })\n\n  it('::delete removes an existing element', () => {\n\n    const state = new Collection('CollectionTest')\n    const initialState = {\n      byId: {1:{_id:1, upsert: 'test'}},\n      allIds: [1]\n    }\n    const action = state.actions.remove({_id: 1})\n    const newState = combineReducers(state.reducer)(initialState, action)\n\n    expect(newState.allIds.length).toBe(0)\n    expect(newState.byId[1]).not.toBeDefined()\n\n  })\n\n  it('accepts additional substate', () => {\n    const state = new Collection('CollectionTest', {\n      another: new State('another', null, {\n        testAction: () => ({})\n      })\n    })\n\n    expect(state.actionTypes.testAction).toBeDefined()\n    expect(state.actions.testAction).toEqual(expect.any(Function))\n  })\n\n  it('::upsert accepts arrays', () => {\n\n    const state = new Collection('CollectionTest')\n    const action = state.actions.upsert([\n      {_id: 1, name: 'test'},\n      {_id: 2, name: 'test'},\n    ])\n    const newState = combineReducers(state.reducer)(undefined, action)\n    \n    expect(newState.allIds.length).toBe(2)\n    const id1 = newState.allIds[0]\n    const id2 = newState.allIds[1]\n    expect(newState.byId[id1]).toEqual({_id: id1, name: 'test'})\n    expect(newState.byId[id2]).toEqual({_id: id2, name: 'test'})\n\n  })\n\n})\n"]}